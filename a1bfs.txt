Graph1



import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

class Graph1 {
    private int numVertices;
    private List<List<Integer>> adjacencyList;

    public Graph1(int numVertices) {
        this.numVertices = numVertices;
        this.adjacencyList = new ArrayList<>(numVertices);
        for (int i = 0; i < numVertices; i++) {
            this.adjacencyList.add(new ArrayList<>());
        }
    }

    public void addEdge(int source, int destination) {
        adjacencyList.get(source).add(destination);
        adjacencyList.get(destination).add(source);
    }

    public void BFS(int startVertex) {
        boolean[] visited = new boolean[numVertices];
        Queue<Integer> queue = new LinkedList<>();

        visited[startVertex] = true;
        System.out.print(startVertex + " ");
        queue.add(startVertex);

        BFSRecursive(visited, queue);
    }

    private void BFSRecursive(boolean[] visited, Queue<Integer> queue) {
        if (queue.isEmpty()) {
            return;
        }

        int vertex = queue.poll();

        for (int neighbor : adjacencyList.get(vertex)) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                System.out.print(neighbor + " ");
                queue.add(neighbor);
            }
        }

        BFSRecursive(visited, queue);
    }
}

public class bfs {
    public static void main(String[] args) {
        int numVertices = 6;
        Graph1 graph = new Graph1(numVertices);

        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(2, 4);
        graph.addEdge(2, 5);

        System.out.println("BFS Traversal (starting from vertex 0):");
        graph.BFS(0);
    }
}
